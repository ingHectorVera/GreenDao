package com.example.hectorvera.greendao.db;

import com.example.hectorvera.greendao.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "PERSONAL_INFORMATION".
 */
public class personalInformation {

    private Long id;
    private String Name;
    private String PhoneNumber;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient personalInformationDao myDao;

    private personalDirection Personal_info_dir;
    private boolean Personal_info_dir__refreshed;


    public personalInformation() {
    }

    public personalInformation(Long id) {
        this.id = id;
    }

    public personalInformation(Long id, String Name, String PhoneNumber) {
        this.id = id;
        this.Name = Name;
        this.PhoneNumber = PhoneNumber;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPersonalInformationDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return Name;
    }

    public void setName(String Name) {
        this.Name = Name;
    }

    public String getPhoneNumber() {
        return PhoneNumber;
    }

    public void setPhoneNumber(String PhoneNumber) {
        this.PhoneNumber = PhoneNumber;
    }

    /** To-one relationship, resolved on first access. */
    public personalDirection getPersonal_info_dir() {
        if (Personal_info_dir != null || !Personal_info_dir__refreshed) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            personalDirectionDao targetDao = daoSession.getPersonalDirectionDao();
            targetDao.refresh(Personal_info_dir);
            Personal_info_dir__refreshed = true;
        }
        return Personal_info_dir;
    }

    /** To-one relationship, returned entity is not refreshed and may carry only the PK property. */
    public personalDirection peakPersonal_info_dir() {
        return Personal_info_dir;
    }

    public void setPersonal_info_dir(personalDirection Personal_info_dir) {
        synchronized (this) {
            this.Personal_info_dir = Personal_info_dir;
            Personal_info_dir__refreshed = true;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
